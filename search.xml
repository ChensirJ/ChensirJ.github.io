<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构-数组1</title>
      <link href="2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%841/"/>
      <url>2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%841/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-数组-Array-–1"><a href="#数据结构-数组-Array-–1" class="headerlink" title="数据结构-数组(Array)–1"></a>数据结构-数组(Array)–1</h1><h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><p>数组其实是一个<strong>最基本，最简单</strong>的数据结构，数组有很多东西值得我们挖掘。</p><h3 id="数组的存放"><a href="#数组的存放" class="headerlink" title="数组的存放"></a>数组的存放</h3><p><strong>把数据码成一排进行存放</strong></p><p><img src="/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%841/array1-1.png" alt="数组的存放"></p><p>这里的数据可以存放不同类型的</p><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><p>在数组中查找存放元素需要通过一个叫索引<code>index</code>的东西进行，一般从0开始，假设数组的长度为n，那么最后一个元素的索引便是n-1。</p><p><img src="/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%841/array1-2.png" alt="数组的索引"></p><h3 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h3><p>我们访问数组中的某个元素可以直接通过索引来访问，假设我们这个数组中存放的都是student类型的数据，如果我们想访问索引为2的这个student的数据，可以通过<code>students[2]</code>这样的方式进行。</p><p><img src="/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%841/array1-3.png" alt="数组的访问"></p><h3 id="数组的使用-Java语言"><a href="#数组的使用-Java语言" class="headerlink" title="数组的使用(Java语言)"></a>数组的使用(Java语言)</h3><h4 id="数组的创建–1"><a href="#数组的创建–1" class="headerlink" title="数组的创建–1"></a>数组的创建–1</h4><p>如果我们暂时不知道数组中存放的数据是什么样的，但知道长度的话我们可以开辟一个空间，但里面的数据为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为10的数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h4 id="遍历访问数组中的每个元素–1"><a href="#遍历访问数组中的每个元素–1" class="headerlink" title="遍历访问数组中的每个元素–1"></a>遍历访问数组中的每个元素–1</h4><p>我们可以通过循环遍历的方式添加数组中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr.length可以获取数组的长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">arr[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的创建–2"><a href="#数组的创建–2" class="headerlink" title="数组的创建–2"></a>数组的创建–2</h4><p>如果我们知道数组存放的数据内容的话，可以用另一种方式进行数组的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scores数组中存放三个元素100, 99, 66</span></span><br><span class="line"><span class="keyword">int</span>[] scores = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>, <span class="number">99</span>, <span class="number">66</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果我们想访问99这个元素的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// score = 99</span></span><br><span class="line"><span class="keyword">int</span> score = score[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h4 id="遍历访问数组中的每个元素–2"><a href="#遍历访问数组中的每个元素–2" class="headerlink" title="遍历访问数组中的每个元素–2"></a>遍历访问数组中的每个元素–2</h4><p>同样的，我们也可以像上面的方法一样遍历访问我们的scores数组，并将其内容输出出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scores.length; i++)&#123;</span><br><span class="line">System.out.println(scores[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java还支持一种增强型的循环遍历方式<code>foreach</code>，循环语句更简便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> score : scores)&#123;</span><br><span class="line">    System.out.println(score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上的举例，我相信你对数组的基本知识以及Java中数组的基本使用有了一定的了解，下一篇中我们将通过Java语言封装一个我们自己的数组类。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
